# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the "master" branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the value of the `ECS_SERVICE` environment variable in the workflow below with the name you set for the Amazon ECS service.
#    Replace the value of the `ECS_CLUSTER` environment variable in the workflow below with the name you set for the cluster.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of the `ECS_TASK_DEFINITION` environment variable in the workflow below with the path to the JSON file.
#    Replace the value of the `CONTAINER_NAME` environment variable in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

name: Deploy to Amazon ECS

on:
  push:
    branches: [ "dev", "cloud" ]

env:
  AWS_REGION: eu-north-1                 # set this to your preferred AWS region, e.g. us-west-1

  ECR_IDENTITY_REPOSITORY: recordhub-identity          # set this to your Amazon ECR repository name
  ECR_CATALOG_REPOSITORY: recordhub-catalog
  ECR_BASKET_REPOSITORY: recordhub-basket 
  ECR_ORDERING_REPOSITORY: recordhub-ordering
  ECR_MAIL_REPOSITORY: recordhub-mail
  ECR_CHAT_REPOSITORY: recordhub-chat

  ECS_IDENTITYSERVICE: recorhub_identityservice_api                 # set this to your Amazon ECS service name
  ECS_CLUSTER: recordhub-cluster               # set this to your Amazon ECS cluster name

  ECS_TASK_DEFINITION_IDENTITY:  .aws/task-identity.json  # set this to the path to your Amazon ECS task definition
  ECS_TASK_DEFINITION_CATALOG:  .aws/task-catalog.json                                              # file, e.g. .aws/task-definition.json
  ECS_TASK_DEFINITION_BASKET:  .aws/task-basket.json
  ECS_TASK_DEFINITION_ORDERING:  .aws/task-ordering.json
  ECS_TASK_DEFINITION_MAIL:  .aws/task-mail.json
  ECS_TASK_DEFINITION_CHAT:  .aws/task-chat.json

  IDENTITY_CONTAINER_NAME: recordhub-identityservice-api          # set this to the name of the container in the
  CATALOG_CONTAINER_NAME: recordhub-catalogservice-api                                               # containerDefinitions section of your task definition
  BASKET_CONTAINER_NAME: recordhub-basketservice-api
  ORDERING_CONTAINER_NAME: recordhub-orderingservice-api
  MAIL_CONTAINER_NAME: recordhub-mailservice-api
  CHAT_CONTAINER_NAME: recordhub-chatservice-api

jobs:
  build-and-push:
    name: Build and Push to ECR
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Build and test .NET Core services
        run: |
          cd RecordHub.IdentityService/RecordHub.IdentityService.Tests
          dotnet restore
          dotnet build
          dotnet test

          cd ../../RecordHub.CatalogService/RecordHub.CatalogService.Tests
          dotnet restore
          dotnet build
          dotnet test

          cd ../../RecordHub.BasketService/RecordHub.BasketService.Tests
          dotnet restore
          dotnet build
          dotnet test

          cd ../../RecordHub.OrderingService/RecordHub.OrderingService.Tests
          dotnet restore
          dotnet build
          dotnet test

          cd ../../RecordHub.MailService/RecordHub.MailService.Tests
          dotnet restore
          dotnet build
          dotnet test

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, Tag, and Push  to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_IDENTITY_REPOSITORY: ${{ env.ECR_IDENTITY_REPOSITORY }}
          ECR_CATALOG_REPOSITORY: ${{ env.ECR_CATALOG_REPOSITORY }}
          ECR_BASKET_REPOSITORY: ${{ env.ECR_BASKET_REPOSITORY }}
          ECR_ORDERING_REPOSITORY: ${{ env.ECR_ORDERING_REPOSITORY }}
          ECR_MAIL_REPOSITORY: ${{ env.ECR_MAIL_REPOSITORY }}
          ECR_CHAT_REPOSITORY: ${{ env.ECR_CHAT_REPOSITORY }}
          IMAGE_TAG: latest
        run: |
          docker build -f RecordHub.IdentityService/RecordHub.IdentityService.Api/Dockerfile -t $ECR_REGISTRY/$ECR_IDENTITY_REPOSITORY:$IMAGE_TAG .
          docker build -f RecordHub.CatalogService/RecordHub.CatalogService.Api/Dockerfile -t $ECR_REGISTRY/$ECR_CATALOG_REPOSITORY:$IMAGE_TAG .
          docker build -f RecordHub.BasketService/RecordHub.BasketService.Api/Dockerfile -t $ECR_REGISTRY/$ECR_BASKET_REPOSITORY:$IMAGE_TAG .
          docker build -f RecordHub.OrderingService/RecordHub.OrderingService.Api/Dockerfile -t $ECR_REGISTRY/$ECR_ORDERING_REPOSITORY:$IMAGE_TAG .
          docker build -f RecordHub.MailService/RecordHub.MailService.Api/Dockerfile -t $ECR_REGISTRY/$ECR_MAIL_REPOSITORY:$IMAGE_TAG .
          docker build -f RecordHub.ChatService/RecordHub.ChatService.Api/Dockerfile -t $ECR_REGISTRY/$ECR_CHAT_REPOSITORY:$IMAGE_TAG .

          docker push $ECR_REGISTRY/$ECR_IDENTITY_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_CATALOG_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_BASKET_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_ORDERING_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_MAIL_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_CHAT_REPOSITORY:$IMAGE_TAG

          echo "identity_image=$ECR_REGISTRY/$ECR_IDENTITY_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "catalog_image=$ECR_REGISTRY/$ECR_CATALOG_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "basket_image=$ECR_REGISTRY/$ECR_BASKET_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "ordering_image=$ECR_REGISTRY/$ECR_ORDERING_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "mail_image=$ECR_REGISTRY/$ECR_MAIL_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "chat_image=$ECR_REGISTRY/$ECR_CHAT_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
     
      - name: Fill in the new image ID in the Amazon ECS task definition IDENTITY
        id: task-def-identity
        uses: aws-actions/amazon-ecs-render-task-definition@c804dfbdd57f713b6c079302a4c01db7017a36fc
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION_IDENTITY }}
          container-name: ${{ env.IDENTITY_CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.identity_image }}

      - name: Deploy Amazon ECS task definition -IDENTITY
        uses: aws-actions/amazon-ecs-deploy-task-definition@df9643053eda01f169e64a0e60233aacca83799a
        with:
          task-definition: ${{ steps.task-def-identity.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

      - name: Fill in the new image ID in the Amazon ECS task definition CATALOG
        id: task-def-catalog
        uses: aws-actions/amazon-ecs-render-task-definition@c804dfbdd57f713b6c079302a4c01db7017a36fc
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION_CATALOG }}
          container-name: ${{ env.CATALOG_CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.catalog_image }}

      - name: Deploy Amazon ECS task definition - CATALOG
        uses: aws-actions/amazon-ecs-deploy-task-definition@df9643053eda01f169e64a0e60233aacca83799a
        with:
          task-definition: ${{ steps.task-def-catalog.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

      - name: Fill in the new image ID in the Amazon ECS task definition BASKET
        id: task-def-basket
        uses: aws-actions/amazon-ecs-render-task-definition@c804dfbdd57f713b6c079302a4c01db7017a36fc
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION_BASKET }}
          container-name: ${{ env.BASKET_CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.basket_image }}

      - name: Deploy Amazon ECS task definition - BASKET
        uses: aws-actions/amazon-ecs-deploy-task-definition@df9643053eda01f169e64a0e60233aacca83799a
        with:
          task-definition: ${{ steps.task-def-basket.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

      - name: Fill in the new image ID in the Amazon ECS task definition ORDERING
        id: task-def-ordering
        uses: aws-actions/amazon-ecs-render-task-definition@c804dfbdd57f713b6c079302a4c01db7017a36fc
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION_ORDERING }}
          container-name: ${{ env.ORDERING_CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.ordering_image }}

      - name: Deploy Amazon ECS task definition - ORDERING
        uses: aws-actions/amazon-ecs-deploy-task-definition@df9643053eda01f169e64a0e60233aacca83799a
        with:
          task-definition: ${{ steps.task-def-ordering.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

      - name: Fill in the new image ID in the Amazon ECS task definition MAIL
        id: task-def-mail
        uses: aws-actions/amazon-ecs-render-task-definition@c804dfbdd57f713b6c079302a4c01db7017a36fc
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION_MAIL }}
          container-name: ${{ env.MAIL_CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.mail_image }}

      - name: Deploy Amazon ECS task definition - MAIL
        uses: aws-actions/amazon-ecs-deploy-task-definition@df9643053eda01f169e64a0e60233aacca83799a
        with:
          task-definition: ${{ steps.task-def-mail.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

      - name: Fill in the new image ID in the Amazon ECS task definition CHAT
        id: task-def-chat
        uses: aws-actions/amazon-ecs-render-task-definition@c804dfbdd57f713b6c079302a4c01db7017a36fc
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION_CHAT }}
          container-name: ${{ env.CHAT_CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.chat_image }}

      - name: Deploy Amazon ECS task definition - CHAT
        uses: aws-actions/amazon-ecs-deploy-task-definition@df9643053eda01f169e64a0e60233aacca83799a
        with:
          task-definition: ${{ steps.task-def-chat.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true