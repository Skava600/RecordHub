// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RecordHub.CatalogService.Infrastructure;

#nullable disable

namespace RecordHub.CatalogService.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RecordHub.CatalogService.Domain.Entities.Artist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Artists");
                });

            modelBuilder.Entity("RecordHub.CatalogService.Domain.Entities.Label", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Labels");
                });

            modelBuilder.Entity("RecordHub.CatalogService.Domain.Entities.Language", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("RecordHub.CatalogService.Domain.Entities.Record", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ArtistId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("LabelId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LanguageId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<short>("Radius")
                        .HasColumnType("smallint");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.HasIndex("LabelId");

                    b.HasIndex("LanguageId");

                    b.ToTable("Records");
                });

            modelBuilder.Entity("RecordHub.CatalogService.Domain.Entities.RecordStyle", b =>
                {
                    b.Property<Guid>("StyleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RecordId")
                        .HasColumnType("uuid");

                    b.HasKey("StyleId", "RecordId");

                    b.HasIndex("RecordId");

                    b.ToTable("RecordStyles");
                });

            modelBuilder.Entity("RecordHub.CatalogService.Domain.Entities.Style", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Styles");
                });

            modelBuilder.Entity("RecordHub.CatalogService.Domain.Entities.Record", b =>
                {
                    b.HasOne("RecordHub.CatalogService.Domain.Entities.Artist", "Artist")
                        .WithMany("Artists")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RecordHub.CatalogService.Domain.Entities.Label", "Label")
                        .WithMany("Records")
                        .HasForeignKey("LabelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RecordHub.CatalogService.Domain.Entities.Language", "Language")
                        .WithMany("Records")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");

                    b.Navigation("Label");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("RecordHub.CatalogService.Domain.Entities.RecordStyle", b =>
                {
                    b.HasOne("RecordHub.CatalogService.Domain.Entities.Record", null)
                        .WithMany("RecordStyles")
                        .HasForeignKey("RecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RecordHub.CatalogService.Domain.Entities.Style", null)
                        .WithMany("RecordStyles")
                        .HasForeignKey("StyleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RecordHub.CatalogService.Domain.Entities.Artist", b =>
                {
                    b.Navigation("Artists");
                });

            modelBuilder.Entity("RecordHub.CatalogService.Domain.Entities.Label", b =>
                {
                    b.Navigation("Records");
                });

            modelBuilder.Entity("RecordHub.CatalogService.Domain.Entities.Language", b =>
                {
                    b.Navigation("Records");
                });

            modelBuilder.Entity("RecordHub.CatalogService.Domain.Entities.Record", b =>
                {
                    b.Navigation("RecordStyles");
                });

            modelBuilder.Entity("RecordHub.CatalogService.Domain.Entities.Style", b =>
                {
                    b.Navigation("RecordStyles");
                });
#pragma warning restore 612, 618
        }
    }
}
